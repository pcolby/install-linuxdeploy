# SPDX-FileCopyrightText: 2024 Paul Colby <git@colby.id.au>
# SPDX-License-Identifier: MIT

name: Summarize Test Results

author: Paul Colby

description: Summarise TAP (Test Anything Protocol) test results

inputs:
  arch:
    description: Target architecture to install linuxdeploy
    default: x86_64
  dir:
    description: Target directory to install linuxdeploy
    default: ${{ runner.temp }}/linuxdeploy
  install-deps:
    description: Install known OS dependencies
    default: true
  plugins:
    description: Additional linuxdeploy plugins to install
    required: false
  set-env:
    description: Add the installed directory to the $PATH environment variable
    default: true
  version:
    description: Version of linudeploy to install
    default: continuous

runs:
  using: composite
  steps:
    - run: |
        set -o errexit -o noclobber -o nounset -o pipefail
        [[ "${INPUTS_INSTALL_DEPS}" = 'false' ]] || sudo apt --assume-yes install libfuse2
        declare -r RELEASE_FORMAT='https://github.com/%s/%s/releases/download/%%s/%s'
        declare -r RAW_FORMAT='https://raw.githubusercontent.com/%s/%s/%%s/%s'
        declare -Ar PLUGIN_FORMAT=(
          [checkrt]=$(printf "${RELEASE_FORMAT}" darealshinji linuxdeploy-plugin-checkrt{,.sh})
          [conda]=$(printf "${RAW_FORMAT}" linuxdeploy linuxdeploy-plugin-conda{,.sh})
          [gstreamer]=$(printf "${RAW_FORMAT}" linuxdeploy linuxdeploy-plugin-gstreamer{,.sh})
          [gtk]=$(printf "${RAW_FORMAT}" linuxdeploy linuxdeploy-plugin-gtk{,.sh})
          [ncurses]=$(printf "${RAW_FORMAT}" linuxdeploy linuxdeploy-plugin-ncurses{,.sh})
          [python]=$(printf "${RELEASE_FORMAT}" niess linuxdeploy-plugin-python{,-${INPUTS_ARCH}.AppImage})
        )
        declare -a binaries=("${INPUTS_DIR}/linuxdeploy-${INPUTS_ARCH}.AppImage")
        declare -a urls=(
          $(printf "$(printf "${RELEASE_FORMAT}" linuxdeploy{,,-${INPUTS_ARCH}.AppImage})" "${INPUTS_VERSION}")
        )
        for plugin in ${INPUTS_PLUGINS}; do
          IFS='@' read -r name version <<< "${plugin}"
          [[ -v "PLUGIN_FORMAT[${name}]" ]] && urlFormat="${PLUGIN_FORMAT[${name}]}" ||
            urlFormat=$(printf "${RELEASE_FORMAT}" linuxdeploy{,-plugin-${name}{,-${INPUTS_ARCH}.AppImage}})
          [[ "${urlFormat}" == 'https://raw.'* ]] && : "${version:=master}" || : "${version:=${INPUTS_VERSION}}"
          printf -v url "${urlFormat}" "${version}"
          binaries+=("${INPUTS_DIR}/${url##*/}")
          urls+=("${url}")
        done
        printf "%s\n" "${urls[@]}"
        curl --create-dirs --fail --fail-early --location --output-dir "${INPUTS_DIR}" --parallel --remote-name-all \
          --silent --write-out '[%{urlnum}][%{http_code}] %{errormsg}: %{url}\n' "${urls[@]}"
        chmod a+x "${binaries[@]}"
        [[ "${INPUTS_SET_ENV}" = 'false' ]] || tee -a "${GITHUB_PATH}" <<< "${INPUTS_DIR}"
        ls -l "${INPUTS_DIR}"
      shell: bash
      env:
        INPUTS_ARCH: ${{ inputs.arch }}
        INPUTS_DIR: ${{ inputs.dir }}
        INPUTS_INSTALL_DEPS: ${{ inputs.install-deps }}
        INPUTS_PLUGINS: ${{ inputs.plugins }}
        INPUTS_SET_ENV: ${{ inputs.set-env }}
        INPUTS_VERSION: ${{ inputs.version }}

branding:
  color: green
  icon: package
