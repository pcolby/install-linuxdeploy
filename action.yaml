# SPDX-FileCopyrightText: 2024-2025 Paul Colby <git@colby.id.au>
# SPDX-License-Identifier: MIT

name: Quick install linuxdeploy

author: Paul Colby

description: Install linuxdeploy, with optional plugins, in parrallel. Fast.

inputs:
  arch:
    description: Target architecture to install linuxdeploy
    required: false
  dir:
    description: Target directory to install linuxdeploy
    default: ${{ runner.temp }}/linuxdeploy
  install-deps:
    description: Install known OS dependencies
    default: true
  plugins:
    description: Additional linuxdeploy plugins to install
    required: false
  set-env:
    description: Add the installed directory to the $PATH environment variable
    default: true
  version:
    description: Version of linuxdeploy to install
    default: continuous

runs:
  using: composite
  steps:
    - run: |
        set -o errexit -o noclobber -o nounset -o pipefail
        [[ "${INPUTS_INSTALL_DEPS}" = 'false' ]] || sudo apt --assume-yes install libfuse2
        declare -Ar DEFAULT_ARCH=([arm]='armhf' [arm64]='aarch64' [x64]='x86_64' [x86]='i386')
        declare -r ARCH="${INPUTS_ARCH:-${DEFAULT_ARCH[${RUNNER_ARCH,,}]}}"
        declare -r RELEASE_FORMAT='https://github.com/%s/%s/releases/download/%%s/%s'
        declare -r RAW_FORMAT='https://raw.githubusercontent.com/%s/%s/%%s/%s'
        declare -Ar PLUGIN_FORMAT=(
          [checkrt]=$(printf "${RELEASE_FORMAT}" darealshinji linuxdeploy-plugin-checkrt{,.sh})
          [conda]=$(printf "${RAW_FORMAT}" linuxdeploy linuxdeploy-plugin-conda{,.sh})
          [demo]=$(printf "${RAW_FORMAT}" linuxdeploy misc-plugins 'demo/linuxdeploy-plugin-demo.sh')
          [gdb]=$(printf "${RAW_FORMAT}" linuxdeploy misc-plugins 'gdb/linuxdeploy-plugin-gdb.sh')
          [gettext]=$(printf "${RAW_FORMAT}" linuxdeploy misc-plugins 'gettext/linuxdeploy-plugin-gettext.sh')
          [grantlee5]=$(printf "${RAW_FORMAT}" linuxdeploy misc-plugins 'grantlee5/linuxdeploy-plugin-grantlee5.sh')
          [gstreamer]=$(printf "${RAW_FORMAT}" linuxdeploy linuxdeploy-plugin-gstreamer{,.sh})
          [gtk]=$(printf "${RAW_FORMAT}" linuxdeploy linuxdeploy-plugin-gtk{,.sh})
          [ncurses]=$(printf "${RAW_FORMAT}" linuxdeploy linuxdeploy-plugin-ncurses{,.sh})
          [nop]=$(printf "${RELEASE_FORMAT}" kstr0k linuxdeploy-plugin-nop{,.sh})
          [python]=$(printf "${RELEASE_FORMAT}" niess linuxdeploy-plugin-python{,-${ARCH}.AppImage})
        )
        declare -a binaries=("${INPUTS_DIR}/linuxdeploy-${ARCH}.AppImage")
        declare -a urls=(
          $(printf "$(printf "${RELEASE_FORMAT}" linuxdeploy{,,-${ARCH}.AppImage})" "${INPUTS_VERSION}")
        )
        for plugin in ${INPUTS_PLUGINS}; do
          IFS='@' read -r name version <<< "${plugin}"
          [[ "${name}" != 'nop' ]] || version='v0.1' # \todo Generalise this.
          [[ -v "PLUGIN_FORMAT[${name}]" ]] && urlFormat="${PLUGIN_FORMAT[${name}]}" ||
            urlFormat=$(printf "${RELEASE_FORMAT}" linuxdeploy{,-plugin-${name}{,-${ARCH}.AppImage}})
          [[ "${urlFormat}" == 'https://raw.'* ]] && : "${version:=master}" || : "${version:=${INPUTS_VERSION}}"
          printf -v url "${urlFormat}" "${version}"
          binaries+=("${INPUTS_DIR}/${url##*/}")
          urls+=("${url}")
        done
        printf "%s\n" "${urls[@]}"
        curl --create-dirs --fail --fail-early --location --output-dir "${INPUTS_DIR}" --parallel --remote-name-all \
          --silent --write-out '[%{urlnum}][%{http_code}] %{errormsg}: %{url}\n' "${urls[@]}"
        chmod a+x "${binaries[@]}"
        [[ "${INPUTS_SET_ENV}" = 'false' ]] || tee -a "${GITHUB_PATH}" <<< "${INPUTS_DIR}"
        ls -l "${INPUTS_DIR}"
      shell: bash
      env:
        INPUTS_ARCH: ${{ inputs.arch }}
        INPUTS_DIR: ${{ inputs.dir }}
        INPUTS_INSTALL_DEPS: ${{ inputs.install-deps }}
        INPUTS_PLUGINS: ${{ inputs.plugins }}
        INPUTS_SET_ENV: ${{ inputs.set-env }}
        INPUTS_VERSION: ${{ inputs.version }}

branding:
  color: green
  icon: package
